<html>
<head>
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.x-git.min.js"></script>
    <script type="text/javascript" src="https://pages.nist.gov/leaveNotice/js/jquery.leaveNotice-nist.min.js"></script>
    <script src="https://pages.nist.gov/nist-header-footer/js/nist-header-footer.js" type="text/javascript" defer="defer"></script>
    <link rel="stylesheet" type="text/css" href="https://pages.nist.gov/leaveNotice/css/jquery.leaveNotice.css" />
    <link rel="stylesheet" href="https://pages.nist.gov/nist-header-footer/css/nist-combined.css" />

    <script type="text/javascript">
        $(document).ready(function () {
            // Mark external (non-nist.gov) A tags with class "external"
            //If the adress start with https and ends with nist.gov
            var re_nist = new RegExp('^https?:\/\/((^\/)*\.)*nist\\.gov(\/|$)');
            //Regex to find address that start with https
            var re_absolute_address = new RegExp('^((https?:)?\/\/)');
            $("a").each(function () {
                var url = $(this).attr('href');
                if (re_nist.test(url) || !re_absolute_address.test(url)) {
                    $(this).addClass('local');
                } else {
                    $(this).addClass('external');
                }
            });
            // Add leaveNotice to external A elements
            $('a.external').leaveNotice({
                siteName: 'the NIST fork of the leaveNotice jQuery plugin',
            });
        });
    </script>

    <meta name="generator" content="HTML Tidy for Cygwin (vers 1st September 2004), see www.w3.org">
    <link rel="STYLESHEET" href="style.css" type="text/css">

    <title>SCATMECH: dielectric_constant</title>
    <script async type="text/javascript" id="_fed_an_ua_tag" src="https://dap.digitalgov.gov/Universal-Federated-Analytics-Min.js?agency=NIST&subagency=github&pua=UA-66610693-1&yt=true&exts=ppsx,pps,f90,sch,rtf,wrl,txz,m1v,xlsm,msi,xsd,f,tif,eps,mpg,xml,pl,xlt,c"></script>
</head>

<body><br>
  <a name="top" id="top"><!-- --></a>

  <table width="98%" border="0" cellpadding="0" cellspacing="0" align="center">
    <tr>
      <td>
        <p class = "nav"><a href="index.htm">SCATMECH</a> &gt; <a href=
        "classes.htm">Classes and Functions</a> &gt;
        <a href="classes.htm#OPM">Optical Properties and
        Materials</a> &gt; dielectric_constant</p>

        <h1>class dielectric_constant</h1>

        <hr>

        <p>The class that handles the storage of dielectric constants,
        <img src="Images/epsilon.gif" alt=
        "epsilon"><sub>1</sub>+i<img src="Images/epsilon.gif" alt=
        "epsilon"><sub>2</sub>, and their conversions to optical
        constants (<i>n</i> and <i>k</i>). Functions that require
        this information can be prototyped with either <a href=
        "optconst.htm">optical_constant</a> or
        <b>dielectric_constant</b> arguments, and the compiler will
        perform the conversion when necessary. Use of the classes
        <a href="optconst.htm">optical_constant</a> and
        <b>dielectric_constant</b> avoids one accidentally confusing
        the two when passing values to functions, as can happen if
        they are left as complex numbers. To store information about
        the wavelength dependence of the optical constants, use the
        class <a href= "dielfunc.htm">dielectric_function</a>.

	<h2>Include  file:</h2>

          <pre>
#include "<a href=
"../code/optconst.h">optconst.h</a>"
</pre>
        <h2>Source code:</h2>

          <pre>
<a href="../code/optconst.h">optconst.h</a>
</pre>
        <h2>See also:</h2>

        <p><a href="index.htm">SCATMECH Home</a>, &nbsp;
        <a href="convent.htm">Conventions</a>, &nbsp; <a href=
        "optconst.htm">optical_constant</a>, &nbsp; <a href=
        "dielfunc.htm">dielectric_function</a><br>
        <br>
        M. Born and E. Wolf, <i>Principles of Optics</i>,
        (Pergamon, Oxford, 1980).

	<h2>Definition of public elements:</h2>

          <pre>
class dielectric_constant {
        double <a href="#e1">e1</a>;
        double <a href="#e2">e2</a>;
        <a href="#dielectric_constant1">dielectric_constant</a>();
        <a href=
"#dielectric_constant2">dielectric_constant</a>( complex&lt;double&gt; x);
        <a href=
"#dielectric_constant3">dielectric_constant</a>( double x, double y=0.);
        <a href=
"#dielectric_constant4">dielectric_constant</a>( const <a href=
"optconst.htm">optical_constant</a>&amp; n);
        operator <a href=
"#complex">complex&lt;double&gt;</a>() const;
        friend istream&amp; <a href=
"#operatorgtgt">operator&gt;&gt;</a>(istream&amp; is,dielectric_constant&amp; e);
        friend ostream&amp; <a href=
"#operatorltlt">operator&lt;&lt;</a>(ostream&amp; os,const dielectric_constant&amp; ee);
};
</pre>

        <hr>
        <h3><a name="e1" id="e1">double e1</a><br>
        <a name="e2" id="e2">double e2</a></h3>

        <blockquote><p>
          The
          real and imaginary part of the dielectric
          constant.
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "dielectric_constant1" id=
        "dielectric_constant1">dielectric_constant()</a></h3>

        <blockquote><p>
          Default constructor that initializes the dielectric
          constant to that appropriate for vacuum.
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "dielectric_constant2" id=
        "dielectric_constant2">dielectric_constant(
        complex&lt;double&gt; x)</a></h3>

        <blockquote><p>
          Constructor that initializes the dielectric constant to
          the value <b>x</b>.
        <h4>Example:</h4>

          <pre>
complex&lt;double&gt; eps;
dielectric_constant dc(eps);
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "dielectric_constant3" id=
        "dielectric_constant3">dielectric_constant( double x,
        double y=0.0)</a></h3>

        <blockquote><p>
          Constructor that initializes the dielectric constant to
          complex&lt;double&gt;<b>(x,y)</b>.
        <h4>Example:</h4>

          <pre>
dielectric_constant eps(2.25);
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "dielectric_constant4" id=
        "dielectric_constant4">dielectric_constant( const
        optical_constant&amp; n)</a></h3>

        <blockquote><p>
          Constructor that performs conversion from an <a href=
          "optconst.htm">optical_constant</a> to
          <b>dielectric_constant</b>.
        <h4>Example:</h4>

          <pre>
optical_constant n(1.5);
dielectric_constant e(n);
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "complex" id="complex">operator complex&lt;double&gt;()
        const</a></h3>

        <blockquote><p>
          Conversion from <b>dielectric_constant</b> to a
          <b>complex&lt;double&gt;</b>. This conversion should be
          made whenever actual calculations are made with the
          <b>dielectric_constant</b>.
        <h4>Example:</h4>

          <pre>
dielectric_constant e;
double theta;
complex&lt;double&gt; q=sqrt(sqr((complex&lt;double&gt;)e)-sqr(sin(theta)));
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "operatorgtgt" id="operatorgtgt">friend istream&amp;
        operator&gt;&gt;(istream&amp; is,dielectric_constant&amp;
        e)</a></h3>

        <blockquote><p>
          Input of a <b>dielectric_constant</b> from an
          <b>istream</b>.
        <h4>Example:</h4>

          <pre>
dielectric constant e;
cout &lt;&lt; "Enter dielectric constant:";
cin &gt;&gt; e;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "operatorltlt" id="operatorltlt">friend ostream&amp;
        operator&lt;&lt;(ostream&amp; os,const
        dielectric_constant&amp; ee)</a></h3>

        <blockquote><p>
          Output of a <b>dielectric_constant</b> to an
          <b>ostream</b>.
        <h4>Example:</h4>

          <pre>
dielectric_constant e;
cout &lt;&lt; "Dielectric constant = " &lt;&lt; e &lt;&lt; endl;
</pre>
        </blockquote>

          <p><a href="#top"><span class="totop">Top of Page</span></a></p>

<!-- START FOOTER -->
<hr>
<h2>For More Information</h2>

<p>
<a href="https://www.nist.gov/people/thomas-germer">SCATMECH Technical Information and Questions</a><br>
<a href="http://www.nist.gov/pml/div685/index.cfm" target="_top">Sensor Science Division Home Page</a><br>
<a href="mailto:fraser@nist.gov">Sensor Science Division Inquiries</a><br>
<a href="mailto:thomas.germer@nist.gov">Website Comments</a>

<p>
Current SCATMECH version: <a href="./download.htm">7.22 (April 2021)</a><br>

<br>

</td>
</tr>
</table>

</body>
</html>
