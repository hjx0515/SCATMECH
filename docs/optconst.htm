<html>
<head>
    <link rel="stylesheet" href="https://pages.nist.gov/nist-header-footer/css/nist-combined.css">
    <script src="https://pages.nist.gov/nist-header-footer/js/jquery-1.12.4.min.js" type="text/javascript" defer="defer"></script>
    <script src="https://pages.nist.gov/nist-header-footer/js/nist-header-footer.js" type="text/javascript" defer="defer"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            // Mark external (non-nist.gov) A tags with class "external"
            //If the adress start with https and ends with nist.gov
            var re_nist = new RegExp('^https?:\/\/((^\/)*\.)*nist\\.gov(\/|$)');
            //Regex to find address that start with https
            var re_absolute_address = new RegExp('^((https?:)?\/\/)');
            $("a").each(function () {
                var url = $(this).attr('href');
                if (re_nist.test(url) || !re_absolute_address.test(url)) {
                    $(this).addClass('local');
                } else {
                    $(this).addClass('external');
                }
            });
            // Add leaveNotice to external A elements
            $('a.external').leaveNotice({
                siteName: 'the NIST fork of the leaveNotice jQuery plugin',
            });
        });
    </script>

    <meta name="generator" content="HTML Tidy for Cygwin (vers 1st September 2004), see www.w3.org">
    <link rel="STYLESHEET" href="style.css" type="text/css">

    <title>SCATMECH: optical_constant</title>
    <script async type="text/javascript" id="_fed_an_ua_tag" src="https://dap.digitalgov.gov/Universal-Federated-Analytics-Min.js?agency=NIST&subagency=github&pua=UA-66610693-1&yt=true&exts=ppsx,pps,f90,sch,rtf,wrl,txz,m1v,xlsm,msi,xsd,f,tif,eps,mpg,xml,pl,xlt,c"></script>
</head>

<body><br>
  <a name="top" id="top"><!-- --></a>

  <table width="98%" border="0" cellpadding="0" cellspacing="0" align="center">
    <tr>
      <td>
        <p class="nav"><b><a href="index.htm">SCATMECH</a> &gt; <a href=
        "classes.htm">Classes and Functions</a> &gt;
        <a href="classes.htm#OPM">Optical Properties and
        Materials</a> &gt; optical_constant</b></p>

        <h1>class optical_constant</h1>

        <hr>
        <p>The class that handles the storage of optical constants,
        <i>n</i> and <i>k</i>, and its conversion to dielectric
        constants. Functions that require this information can be
        prototyped with either <b>optical_constant</b> or <a href=
        "dielectric.htm">dielectric_constant</a> arguments, and the
        compiler will perform the conversion when necessary. Use of
        the classes <b>optical_constant</b> and <a href=
        "dielectric.htm">dielectric_constant</a> avoids one
        accidentally confusing the two when passing values to
        functions, as can happen if they are left as complex
        numbers. To store information about the wavelength dependence
        of the optical constants, use the class <a href=
        "dielfunc.htm">dielectric_function</a>.

	<h2>Include file:</h2>

          <pre>
#include "<a href=
"../code/optconst.h">optconst.h</a>"
</pre>
        <h2>Source code:</h2>

          <pre>
<a href="../code/optconst.h">optconst.h</a>
</pre>
        <h2>See also:</h2>

        <p><a href="index.htm">SCATMECH Home</a>, &nbsp;
        <a href="convent.htm">Conventions</a>, &nbsp; <a href=
        "dielectric.htm">dielectric_constant</a>, &nbsp; <a href=
        "dielfunc.htm">dielectric_function</a></p>

        <p>M. Born and E. Wolf, <i>Principles of Optics</i>,
        (Pergamon, Oxford, 1980).</p>

	<h2>Definition of public elements:</h2>

          <pre>
class optical_constant {
    double <a href="#n">n</a>;
    double <a href="#k">k</a>;
    <a href="#optical_constant1">optical_constant</a>();
    <a href=
"#optical_constant2">optical_constant</a>(complex&lt;double&gt; x);
    <a href=
"#optical_constant3">optical_constant</a>(double x, double y=0.);
    <a href=
"#optical_constant4">optical_constant</a>(const <a href="dielectric.htm">dielectric_constant</a>&amp; e);
    operator <a href=
"#complex%3Cdouble%3E">complex&lt;double&gt;</a>() const;
    friend istream&amp; <a href=
"#operatorgtgt">operator&gt;&gt;</a>(istream&amp; is, optical_constant&amp; nn);
    friend ostream&amp; <a href=
"#operator%3C%3C">operator&lt;&lt;</a>(ostream&amp; os, const optical_constant&amp; nn);
};
</pre>

        <hr>

        <h3><a name="n" id="n">double n</a><br>
        <a name="k" id="k">double k</a></h3>

        <blockquote><p>
          The two optical constants. The convention in <b>SCATMECH</b>
          is <b>k</b>&gt;0 for absorbing materials. (See <a href=
          "convent.htm">Conventions</a>.)
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "optical_constant1" id=
        "optical_constant1">optical_constant()</a></h3>

        <blockquote><p>
          Default constructor that initializes the optical
          constants <b>n</b>=1 and <b>k</b>=0.
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "optical_constant2" id=
        "optical_constant2">optical_constant(complex&lt;double&gt;
        x)</a></h3>

        <blockquote><p>
          Constructor that initializes the complex optical constant
          to be <b>x</b>.
        <h4>Example:</h4>

          <pre>
optical_constant silicon(complex&lt;double&gt;(3.882,0.019));
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "optical_constant3" id=
        "optical_constant3">optical_constant(double
        x, double y=0.)</a></h3>

        <blockquote><p>
          Constructor that uses a pair of real numbers as <b>n</b>
          and <b>k</b>.
        <h4>Example:</h4>

          <pre>
optical_constant glass(1.5,0);
optical_constant glass(1.5);  // Same thing.
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "optical_constant4" id=
        "optical_constant4">optical_constant(const
        dielectric_constant&amp; e)</a></h3>

        <blockquote><p>
          Constructor that converts a <a href=
          "dielectric.htm">dielectric_constant</a> to an
          <b>optical_constant</b>.
        <h4>Example:</h4>

          <pre>
dielectric_constant silicon(16.,0.);
optical_constant n(silicon);
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "complex&lt;double&gt;" id=
        "complex&lt;double&gt;">operator
        complex&lt;double&gt;() const</a></h3>

        <blockquote><p>
          Conversion from <b>optical_constant</b> to
          complex&lt;double&gt;. This operator is often useful if
          numerical calculations need to be carried out with a
          complex optical constant.
        <h4>Example:</h4>

          <pre>
optical_constant oc;
complex&lt;double&gt; q=sqrt((complex&lt;double&gt;)oc*(complex&lt;double&gt;)oc-sin(theta)*sin(theta));
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "operatorgtgt" id="operatorgtgt">friend istream&amp;
        operator&gt;&gt;(istream&amp;
        is,optical_constant&amp; nn)</a><br>
        <a name="operator&lt;&lt;" id="operator&lt;&lt;">friend
        ostream&amp;
        operator&lt;&lt;(ostream&amp; os,const
        optical_constant&amp; nn)</a></h3>

        <blockquote><p>
          Operators to input and output an <b>optical_constant</b>
          to or from a stream.
        <h4>Example:</h4>

          <pre>
optical_constant n;
cout &lt;&lt; "Enter an optical constant:";
cin &gt;&gt; n;
cout &lt;&lt; "You entered: " &lt;&lt; n &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

<!-- START FOOTER -->
<hr>
<h2>For More Information</h2>

<p>
<a href="https://www.nist.gov/people/thomas-germer">SCATMECH Technical Information and Questions</a><br>
<a href="http://www.nist.gov/pml/div685/index.cfm" target="_top">Sensor Science Division Home Page</a><br>
<a href="mailto:fraser@nist.gov">Sensor Science Division Inquiries</a><br>
<a href="mailto:thomas.germer@nist.gov">Website Comments</a>

<p>
Current SCATMECH version: <a href="./download.htm">7.22 (April 2021)</a><br>
<br>

</td>
</tr>
</table>

</body>
</html>
