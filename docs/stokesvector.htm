<html>
<head>
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.x-git.min.js"></script>
    <script type="text/javascript" src="https://pages.nist.gov/leaveNotice/js/jquery.leaveNotice-nist.min.js"></script>
    <script src="https://pages.nist.gov/nist-header-footer/js/nist-header-footer.js" type="text/javascript" defer="defer"></script>
    <link rel="stylesheet" type="text/css" href="https://pages.nist.gov/leaveNotice/css/jquery.leaveNotice.css" />
    <link rel="stylesheet" href="https://pages.nist.gov/nist-header-footer/css/nist-combined.css" />

    <script type="text/javascript">
        $(document).ready(function () {
            // Mark external (non-nist.gov) A tags with class "external"
            //If the adress start with https and ends with nist.gov
            var re_nist = new RegExp('^https?:\/\/((^\/)*\.)*nist\\.gov(\/|$)');
            //Regex to find address that start with https
            var re_absolute_address = new RegExp('^((https?:)?\/\/)');
            $("a").each(function () {
                var url = $(this).attr('href');
                if (re_nist.test(url) || !re_absolute_address.test(url)) {
                    $(this).addClass('local');
                } else {
                    $(this).addClass('external');
                }
            });
            // Add leaveNotice to external A elements
            $('a.external').leaveNotice({
                siteName: 'the NIST fork of the leaveNotice jQuery plugin',
            });
        });
    </script>

    <meta name="generator" content="HTML Tidy for Cygwin (vers 1st September 2004), see www.w3.org">
    <link rel="STYLESHEET" href="style.css" type="text/css">

    <title>SCATMECH: StokesVector</title>
    <script async type="text/javascript" id="_fed_an_ua_tag" src="https://dap.digitalgov.gov/Universal-Federated-Analytics-Min.js?agency=NIST&subagency=github&pua=UA-66610693-1&yt=true&exts=ppsx,pps,f90,sch,rtf,wrl,txz,m1v,xlsm,msi,xsd,f,tif,eps,mpg,xml,pl,xlt,c"></script>
</head>

<body><br>
  <a name="top" id="top"><!-- --></a>

  <table width="98%" border="0" cellpadding="0" cellspacing="0" align="center">
    <tr>
      <td>
        <p class="nav"><a href="index.htm">SCATMECH</a> &gt; <a href=
        "classes.htm">Classes and Functions</a> &gt;
        <a href="classes.htm#Pol">Polarization</a> &gt;
        StokesVector</p>

        <h1>class StokesVector</h1>

        <hr>

        <p>The class <b>StokesVector</b> represents a Stokes vector in
        the Stokes-Mueller representation of polarization states.
        Arithmetic operations between Mueller matrices and Stokes
        vectors, various properties of a Stokes vector, and
        transformation operations are defined.

        <p>The elements of the Stokes vector are
        (<i>I</i><sub>s</sub>+<i>I</i><sub>p</sub>,
        <i>I</i><sub>s</sub><i class=
        "sym">-</i><i>I</i><sub>p</sub>, <i>I</i><sub>s<i class=
        "sym">+</i>p</sub><i class=
        "sym">-</i><i>I</i><sub>s<i class="sym">-</i>p</sub>,
        <i>I</i><sub>lcp</sub><i class=
        "sym">-</i><i>I</i><sub>rcp</sub>), where
        <i>I</i><sub>s</sub> is the intensity of the light
        polarized in the s-direction, <i>I</i><sub>p</sub> is the
        intensity of the light polarized in the p-direction,
        <i>I</i><sub>s+p</sub> is the intensity of the light
        polarized in the s+p-direction, <i>I</i><sub>s-p</sub> is
        the intensity of the light polarized in the s-p-direction,
        <i>I</i><sub>lcp</sub> is the left circularly polarized
        intensity, <i>I</i><sub>rcp</sub> is the right circularly
        polarized intensity,</p>

	<h2>Include file:</h2>

          <pre>
#include "<a href="../code/mueller.h">mueller.h</a>"
</pre>
        <h2>Source code:</h2>

          <pre>
<a href="../code/stokes.cpp">stokes.cpp</a>
</pre>
        <h2>See also:</h2>

        <p><a href="index.htm">SCATMECH Home</a>, &nbsp;
        <a href="convent.htm">Conventions</a>, &nbsp; <a href=
        "muellermatrix.htm">MuellerMatrix</a>, &nbsp; <a href=
        "jonesmatrix.htm">JonesMatrix</a>, &nbsp; <a href=
        "jonesvector.htm">JonesVector</a></p>

	<p><a name="RefBohren" id="RefBohren"></a><a href="http://dx.doi.org/10.1002/9783527618156">C.F. Bohren and D.R. Huffman, <i>Absorption and Scattering of Light by Small Particles</i>, (Wiley, New York, 1983).</a><br>
        <a name="RefHulst" id="RefHulst"></a><a href="https://books.google.com/books?hl=en&lr=&id=PlHfPMVAFRcC&oi=fnd&pg=PA1&ots=Gg_gMuimH7&sig=gqf0sZ1ELYIDmyxa0vLzXIPcLWs">H.C. van de Hulst, <i>Light Scattering by Small Particles</i>, (Dover, New York, 1981).</a><br>
        <a name="RefChipman" id="RefChipman"></a><a href="https://books.google.com/books/about/Handbook_of_Optics_Fundamentals_techniqu.html?id=ggc6AQAAIAAJ">R.A. Chipman, &quot;Polarimetry.&quot; in <i>Handbook of Optics</i>, (McGraw-Hill, New York, 1995).</a></p>

	<h2>Definition of public
        elements:</h2>

          <pre>
class StokesVector {
    public:
        <a href="#StokesVector()">StokesVector</a>();
        <a href="#StokesVector(doubledoubledoubledouble)">StokesVector</a>(double I,double Q,double U,double V);
        <a href="#StokesVector(constStokesVector)">StokesVector</a>(const StokesVector&amp; x);
        <a href="#StokesVector(constJonesVector)">StokesVector</a>(const <a href="jonesvector.htm">JonesVector</a>&amp; j);
        StokesVector&amp; <a href="#operatore(constStokesVector)">operator=</a>(const StokesVector&amp; x);
        double&amp; <a href="#I()">I</a>();
        double <a href="#I()">I</a>() const;
        double&amp; <a href="#Q()">Q</a>();
        double <a href="#Q()">Q</a>() const;
        double&amp; <a href="#U()">U</a>();
        double <a href="#U()">U</a>() const;
        double&amp; <a href="#V()">V</a>();        
        double <a href="#V()">V</a>() const;
        double&amp; <a href="#operatorat(int)">operator[]</a>(int i);
        double <a href="#operatorat(int)">operator[]</a>(int i) const;
        StokesVector <a href="#operatort(constMuellerMatrix)">operator*</a>(const <a href="muellermatrix.htm">MuellerMatrix</a>&amp; matrix) const;
        double <a href="#operatort(constStokesVector)">operator*</a>(const StokesVector&amp; a) const;
        StokesVector <a href="#operatorp(constStokesVector)">operator+</a>(const StokesVector&amp; a) const;
        StokesVector <a href="#operatorm(constStokesVector)">operator-</a>(const StokesVector&amp; a) const;
        StokesVector <a href="#operatorm()">operator-</a>() const;
        StokesVector <a href="#operatort(double)">operator*</a>(double d) const;
        friend StokesVector <a href="#operatort(doubleconstStokesVector)">operator*</a>(double d,const StokesVector&amp; s);
        StokesVector&amp; <a href="#operatorte(double)">operator*=</a>(double d);
        StokesVector <a href="#operatord(double)">operator/</a>(double d) const;
        StokesVector&amp; <a href="#operatorde(double)">operator/=</a>(double d);
        StokesVector <a href="#rotate(double)">rotate</a>(double angle) const;
        double <a href="#eta()">eta</a>() const;
        double <a href="#intensity()">intensity</a>() const;
        double <a href="#DOLP()">DOLP</a>() const;
        double <a href="#DOP()">DOP</a>() const;
        double <a href="#DOCP()">DOCP</a>() const;
        double <a href="#e()">e</a>() const;
        double <a href="#delta()">delta</a>() const;
        double <a href="#psi()">psi</a>() const;
        double <a href="#eccentricity()">eccentricity</a>() const;
	bool <a href="#valid()">valid</a>() const;
        StokesVector <a href="#polpart()">pol_part</a>() const;
        StokesVector <a href="#unpolpart()">unpol_part</a>() const;
};

ostream&amp; <a href="#operatorltlt">operator&lt;&lt;</a>(ostream&amp; os,const StokesVector&amp; j);
istream&amp; <a href="#operatorgtgt">operator&gt;&gt;</a>(istream&amp; is, StokesVector&amp; j);

</pre>

        <hr>

        <a name="StokesVector()" id= "StokesVector()"></a>
	<h3>StokesVector()</h3>

        <blockquote>
         <p>The default constructor leaves the elements unassigned.
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<a name="StokesVector(doubledoubledoubledouble)" id="StokesVector(doubledoubledoubledouble)"></a>
        <h3>StokesVector(double I,double Q,double U,double V)</h3>

        <blockquote>
          <p>Constructor for a <b>StokesVector</b> that initializes
          the vector with four real numbers.

        <h4>Example:</h4>

          <pre>
StokesVector s(1,0,0,0); // Unpolarized light of unity intensity
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<a name="StokesVector(constStokesVector)" id="StokesVector(constStokesVector)"></a>
	<h3>StokesVector(const StokesVector&amp; x)</h3>

        <blockquote><p>
          Copy constructor.
        <h4>Example:</h4>

          <pre>
StokesVector a;
StokesVector b(a);
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<a name="StokesVector(constJonesVector)" id="StokesVector(constJonesVector"></a>
	    <h3>StokesVector(const JonesVector&amp; j)</h3>

        <blockquote><p>
          Constructor that converts a <a href=
          "jonesvector.htm">JonesVector</a> to a
          <b>StokesVector</b>.

        <h4>Example:</h4>

          <pre>
JonesVector j;
StokesVector s(j);
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<a name="operatore(constStokesVector)" id="operatore(constStokesVector)"></a>
	<h3>StokesVector&amp; operator=(const StokesVector&amp; x)</h3>

        <blockquote><p>
          Assignment operator.
        <h4>Example:</h4>

          <pre>
StokesVector a,b
a=b;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>


	<h3><a name="I()" id= "I()">double&amp; I()</a><br>
        double I() const<br>
        <a name="Q()" id="Q()">double&amp; Q()</a><br>
        double Q() const<br>
        <a name="U()" id="U()">double&amp; U()</a><br>
        double U() const<br>
        <a name="V()" id="V()">double&amp; V()</a><br>
        double V() const<br></h3>

        <blockquote><p>
          Operators that return references to each of the elements
          of the <b>StokesVector</b>, using the notation (I,Q,U,V).
        <h4>Example:</h4>

          <pre>
StokesVector s;
// Circularly polarized light:
s.I()=1.;
s.Q()=0.;
s.U()=0.;
s.V()=1.;
cout &lt;&lt; s.I() &lt;&lt; '/t' &lt;&lt; s.Q() &lt;&lt; '/t' &lt;&lt; s.U() &lt;&lt; '/t' &lt;&lt; s.V() &lt;&lt; '/t' &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "operatorat(int)" id="operatorat(int)">double&amp;
        operator[](int i)<br>
        double operator[](int i) const</a></h3>

        <blockquote><p>
          Operators that returns a reference to a specific element
          by number.
        <h4>Example:</h4>

          <pre>
StokesVector s;
// Circularly polarized light...
s[0]=1.;
s[1]=0.;
s[2]=0.;
s[3]=1.;
cout &lt;&lt; s[0] &lt;&lt; '/t' &lt;&lt; s[1] &lt;&lt; '/t' &lt;&lt; s[2] &lt;&lt; '/t' &lt;&lt; s[3] &lt;&lt; '/t' &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<a name="operatort(constMuellerMatrix)" id="operatort(constMuellerMatrix)"></a>
	    <h3>StokesVector operator*(const MuellerMatrix&amp; matrix) const</h3>

        <blockquote><p>
          Right multiplication of a <b>StokesVector</b> by a
          <a href="muellermatrix.htm">MuellerMatrix</a>.
        <h4>Example:</h4>

          <pre>
StokesVector vector;
MuellerMatrix matrix;
vector = vector*matrix;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<a name="operatort(constStokesVector)" id="operatort(constStokesVector)"></a>
	<h3>double operator*(const StokesVector&amp; a) const</h3>

        <blockquote><p>
          Scalar product between two <b>StokesVector</b> objects.
        <h4>Example:</h4>

          <pre>
StokesVector vector1,vector2;
double scalar = vector1*vector2;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<a name="operatorp(constStokesVector)" id="operatorp(constStokesVector)"></a>
        <a name="operatorm(constStokesVector)" id="operatorm(constStokesVector)"></a>
	<h3>StokesVector operator+(const StokesVector&amp; a) const<br>
	  StokesVector operator-(const StokesVector&amp; a) const</h3>

        <blockquote><p>
          Addition or subtraction of two <b>StokesVector</b>
          objects.
        <h4>Example:</h4>

          <pre>
StokesVector vector1,vector2,vector3;
vector3 = vector1+vector2;
vector3 = vector1-vector2;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name="operatorm()" id="operatorm()">StokesVector operator-()
        const</a></h3>

        <blockquote><p>
          Negation of a <b>StokesVector</b>.
        <h4>Example:</h4>

          <pre>
StokesVector vector;
vector = -vector;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name="operatort(double)" id="operatort(double)">StokesVector
        operator*(double d) const</a><br>
        <a name="operatort(doubleconstStokesVector)" id="operatort(doubleconstStokesVector)">
	  friend StokesVector operator*(double d,const StokesVector&amp;
        s)</a><br>
        <a name="operatorte(double)" id="operatorte(double)">
	  StokesVector&amp; operator*=(double d)</a><br>
        <a name="operatord(double)" id="operatord(double)">
	  StokesVector operator/(double d) const</a><br>
        <a name="operatorde(double)" id="operatorde(double)">
	  StokesVector&amp; operator/=(double d)</a></h3>

        <blockquote><p>
          Multiplication and division of a <b>StokesVector</b> by a
          scalar.
        <h4>Example:</h4>

          <pre>
StokesVector vector;
double scalar;
vector = vector*scalar;
vector = scalar*vector; // Same thing.
vector *= scalar;       // Also same thing.
vector = vector/scalar;
vector /= scalar;       // Same thing.
vector = scalar/vector; // Not allowed.
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name="rotate(double)" id="rotate(double)">
	    StokesVector rotate(double angle) const</a></h3>

        <blockquote><p>
          Function that returns a <b>StokesVector</b> rotated by
          some <b>angle</b>. The vector is rotated in a clockwise
          direction for positive <b>angle</b>.
        <h4>Example:</h4>

          <pre>
StokesVector a,b;
a = b.rotate(45.*PI/180.);  // rotate b by 45 degrees.
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name="eta()" id="eta()">double eta() const</a></h3>

        <blockquote><p>
          Function that returns the principal angle of the
          polarization. The angle is measured counterclockwise from
          s-polarization.
        <h4>Example:</h4>

          <pre>
StokesVector a;
cout &lt;&lt; "Principal angle = " &lt;&lt; a.eta()/PI*180. &lt;&lt; " degrees" &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name= "intensity()" id="intensity()">double intensity()
        const</a></h3>

        <blockquote><p>
          Function that returns the intensity associated with a
          <b>StokesVector</b>. This function is equivalent to
          <b>I()</b>.
        <h4>Example:</h4>

          <pre>
StokesVector a;
cout &lt;&lt; "Intensity = " &lt;&lt; a.intensity() &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "DOLP()" id="DOLP()">double DOLP() const</a><br>
        <a name="DOP()" id="DOP()">double DOP() const</a><br>
        <a name="DOCP()" id="DOCP()">double DOCP() const</a></h3>

        <blockquote><p>
          Functions that return the degrees of linear polarization
          (<b>DOLP</b>), full polarization (<b>DOP</b>), and
          circular polarization (<b>DOCP</b>). The degree of
          circular polarization is positive for left-circularly
          polarized light.
        <h4>Example:</h4>

          <pre>
StokesVector a;
cout &lt;&lt; "Degrees of polarization: " &lt;&lt; endl
     &lt;&lt; "DOLP: " &lt;&lt; a.DOLP() &lt;&lt; endl
     &lt;&lt; "DOP:  " &lt;&lt; a.DOP() &lt;&lt; endl
     &lt;&lt; "DOCP: " &lt;&lt; a.DOCP() &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name="e()" id="e()">double e() const</a></h3>

        <blockquote><p>
          Function that returns the ellipticity of the field (ratio
          of minor axis to major axis).
        <h4>Example:</h4>

          <pre>
StokesVector a;
cout &lt;&lt; "Ellipticity = " &lt;&lt; a.e() &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "delta()" id="delta()">double delta() const</a></h3>

        <blockquote><p>
          Function that returns the phase difference between the
          two components of the light.
        <h4>Example:</h4>

          <pre>
StokesVector a;
cout &lt;&lt; "delta = " &lt;&lt; a.delta() &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "psi()" id="psi()">double psi() const</a></h3>

        <blockquote><p>
          Function that returns the arc tangent of the ratio
          between the two components of the polarized part of the
          light. The returned value is zero for p-polarized light.
        <h4>Example:</h4>

          <pre>
StokesVector a;
cout &lt;&lt; "delta = " &lt;&lt; a.delta() &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name=
        "eccentricity()" id="eccentricity()">double
        eccentricity() const</a></h3>

        <blockquote><p>
          Function that returns the eccentricity of the light.
        <h4>Example:</h4>

          <pre>
StokesVector a;
cout &lt;&lt; "eccentricity = " &lt;&lt; a.eccentricity() &lt;&lt; endl;
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name="valid()" id="valid()">bool valid() const</a></h3>

        <blockquote><p>
          Function that returns <tt>true</tt> if the Stokes vector is physically valid and false otherwise.  It
	  checks that the first element is greater than or equal to the square rooot of the sum of squares of
	  the other elements.
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3><a name="polpart()" id="polpart()">
	    StokesVector pol_part() const</a><br>
        <a name="unpolpart()" id="unpolpart()">
	  StokesVector unpol_part() const</a></h3>

        <blockquote><p>
          Functions that return the polarized and unpolarized parts
          of a <b>StokesVector</b>.
        <h4>Example:</h4>

          <pre>
StokesVector a,pol,unpol;
pol = a.pol();
unpol = a.unpol();
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3>
        <a name= "operatorltlt" id="operatorltlt">
        ostream&amp; operator&lt;&lt;(ostream&amp; os,const
        StokesVector&amp; j)</a></h3>

        <blockquote><p>
          Operator that prints a <b>StokesVector</b> to an output
          stream. The output contains four floating point numbers, separated by commas, and surrounded by parentheses, e.g.,
	  <tt>(5.321,3.432,-2.332,1.034)</tt>

        <h4>Example:</h4>

          <pre>
StokesVector a;
cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;
</pre>

        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

	<h3>
        <a name="operatorgtgt" id="operatorgtgt">
        istream&amp; operator&gt;&gt;(istream&amp; is,
        StokesVector&amp; j)</a></h3>

        <blockquote><p>
          Operator that reads a <b>StokesVector</b> from an input
          stream.  The input must contain four floating point numbers, separated by commas, and be surrounded by parentheses, e.g.,
	  <tt>(5.321,3.432,-2.332,1.034)</tt>. 

        <h4>Example:</h4>

          <pre>
StokesVector a;
cin &gt;&gt; a;
</pre>

        </blockquote>


        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

<!-- START FOOTER -->
<hr>
<h2>For More Information</h2>

<p>
<a href="https://www.nist.gov/people/thomas-germer">SCATMECH Technical Information and Questions</a><br>
<a href="http://www.nist.gov/pml/div685/index.cfm" target="_top">Sensor Science Division Home Page</a><br>
<a href="mailto:fraser@nist.gov">Sensor Science Division Inquiries</a><br>
<a href="mailto:thomas.germer@nist.gov">Website Comments</a>

<p>
Current SCATMECH version: <a href="./download.htm">7.22 (April 2021)</a><br>
<br>

</td>
</tr>
</table>

</body>
</html>
