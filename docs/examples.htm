<html>
<head>
    <link rel="stylesheet" href="https://pages.nist.gov/nist-header-footer/css/nist-combined.css">
    <script src="https://pages.nist.gov/nist-header-footer/js/jquery-1.9.0.min.js" type="text/javascript" defer="defer"></script>
    <script src="https://pages.nist.gov/nist-header-footer/js/nist-header-footer.js" type="text/javascript" defer="defer"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            // Mark external (non-nist.gov) A tags with class "external"
            //If the adress start with https and ends with nist.gov
            var re_nist = new RegExp('^https?:\/\/((^\/)*\.)*nist\\.gov(\/|$)');
            //Regex to find address that start with https
            var re_absolute_address = new RegExp('^((https?:)?\/\/)');
            $("a").each(function () {
                var url = $(this).attr('href');
                if (re_nist.test(url) || !re_absolute_address.test(url)) {
                    $(this).addClass('local');
                } else {
                    $(this).addClass('external');
                }
            });
            // Add leaveNotice to external A elements
            $('a.external').leaveNotice({
                siteName: 'the NIST fork of the leaveNotice jQuery plugin',
            });
        });
    </script>

    <meta name="generator" content="HTML Tidy for Cygwin (vers 1st September 2004), see www.w3.org">
    <link rel="STYLESHEET" href="style.css" type="text/css">

    <title>SCATMECH: Examples</title>
    <script async type="text/javascript" id="_fed_an_ua_tag" src="https://dap.digitalgov.gov/Universal-Federated-Analytics-Min.js?agency=NIST&subagency=github&pua=UA-66610693-1&yt=true&exts=ppsx,pps,f90,sch,rtf,wrl,txz,m1v,xlsm,msi,xsd,f,tif,eps,mpg,xml,pl,xlt,c"></script>
</head>

<body><br>
  <a name="top" id="top"><!-- --></a>

  <table width="98%" border="0" cellpadding="0" cellspacing="0"  align="center">
    <tr>
      <td>
        <p class="nav"><a href="index.htm">SCATMECH</a> &gt; Example Programs</p>

        <h1>Example Programs</h1>

	<hr>

        <p>The following provides examples of how the SCATMECH library
        can be used in a variety of types of calculations. Since
        each example has its own <b>main()</b>, each is expected to
        be linked separately.

        <ul>
          <li><a href="#Example1">BRDFProg</a> -- Polarized light
          scattering model evaluator</li>

          <li><a href="#Example2">RCWProg</a> -- Reflection or
          transmission from a grating</li>

          <li><a href="#Example3">ReflectProg</a> -- Thin film
          reflectance</li>

          <li><a href="#Example4">MieProg</a> -- Mie
          scattering</li>
        </ul>

	<p>Notice that all four examples contain a <tt>try</tt>/<tt>catch</tt> block, so that any errors
	are handled and messages written to the standard error stream (<tt>cerr</tt>).

        <h2><a name="Example1" id="Example1">BRDFProg</a></h2>

        <p>The following example (found in <a href=
        "../code/BRDFProg/BRDFProg.cpp">BRDFProg.cpp</a>) asks the
        user for an incident angle, a range of incident polar and
        azimuthal angles, and a BRDF model. The program writes 
        to the standard output the principal angle of the
        polarization, the various degrees of polarizations, and the
        intensity. </p>

        <blockquote>
          <pre>
<font color="#990000">
#include "brdf.h"

using namespace std;        // Use unqualified names for Standard C++ library
using namespace SCATMECH;   // Use unqualified names for SCATMECH library

int main(int argv,char** argc)
{
    try {

        // Query user for scattering angles and ranges...
        double thetai = AskUser("Incident Angle ",45.)*deg;

        double thetas_1 = AskUser("Initial Scattering Angle ",45.)*deg;
        double thetas_2 = AskUser("Final Scattering Angle ",45.)*deg;
        double thetas_3 = AskUser("Step Scattering Angle ",1.)*deg;

        double phis_1 = AskUser("Initial Azimuthal Angle ",0.)*deg;
        double phis_2 = AskUser("Final Azimuthal Angle ",180.)*deg;
        double phis_3 = AskUser("Step Azimuthal Angle ",2.)*deg;

        // Get an instance of BRDF_Model...
        BRDF_Model_Ptr model = Get_Model_Ptr();

        // Query user for model parameters...
        model->AskUser();

        // Loop through scattering geometries...
        for (double thetas=thetas_1; thetas<=thetas_2; thetas+=thetas_3) {
            for (double phis=phis_1; phis<=phis_2; phis+=phis_3) {

                // Get the Mueller matrix for scattering...
                MuellerMatrix m=model->Mueller(thetai,thetas,phis,0.);

                // Calculate the Stokes vector for p-polarized incident light...
                StokesVector s=m*StokesVectorUnitP();

                // Print out various light scattering parameters...
                cout << thetas/deg << tab   // Scattering angle (theta)
                     << phis/deg << tab     // Scattering angle (phi)
                     << s.eta()/deg << tab  // Principal angle of polarization
                     << s.DOLP() << tab     // Degree of linear polarization
                     << s.DOCP() << tab     // Degree of circular polarization
                     << s.DOP() << tab      // Degree of polarization
                     << s.I() << endl;      // The intensity (BRDF)
            }
        }

    } catch (exception& e) {

        cerr << e.what() << endl;

    }

    return 0;
}
</font>
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

        <h2><a name="Example2" id="Example2">RCWProg</a></h2>

        <p>The following program (found in <a href=
        "../code/RCWProg/RCWProg.cpp">RCWProg.cpp</a>)
        demonstrates how one can use the rigorous coupled-wave
        (RCW) solution for diffraction from a grating. In this
        case, it calculates ellipsometric parameters for the normal
        (specular) reflection or transmission from the grating as a
        function of wavelength and writes the results to the
        standard output.</p>

        <blockquote>
          <pre>
<font color="#990000">#include "rcw.h"

using namespace std;
using namespace SCATMECH;

int main()
{
    try {

        // Create object...
        RCW_Model RCW;

        // Query user for parameters...
        RCW.AskUser();

        // This keeps RCW from being verbose...
        RCW.set_quiet(1);

        // Display all of the available parameters...
        cerr << endl << "Available parameters:" << endl << endl;
        RCW.print_parameters(cerr);
        cerr << endl;

        // Get parameter to vary, its limits, and its range...
        string parameter=AskUser("Parameter to vary",string("lambda"));
        double begin=AskUser("Initial value",0.200);
        double end=AskUser("Final value",0.800);
        double step=AskUser("Step value",0.005);

        // Output file header...
        cout << parameter << tab << "alpha" << tab << "beta" << endl;

        // Scan parameter...
        for (double value = begin; value <= end; value += step) {

            // Set the parameter...
            RCW.set_parameter(parameter,value);

            // Get the Mueller matrix intensity of the specular (0 order) reflection...
            MuellerMatrix M = RCW.GetIntensity(0);

            // Get the Stokes vector for 45 deg polarized incident light...
            StokesVector S = M*StokesVectorUnitLinear(45.*deg);

            // Output the normalized Stokes parameters measured by a rotating analyzer ellipsometer...
            cout << value << tab << S[1]/S[0] << tab << S[2]/S[0] << endl;
        }

    } catch (exception& e) {

        cerr << e.what() << endl;

    }
    return 0;
}
</font>
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

        <h2><a name="Example3" id="Example3">ReflectProg</a></h2>

        <p>The following program (found in <a href=
        "../code/ReflectProg/ReflectProg.cpp">ReflectProg.cpp</a>)
        demonstrates how one can use the thin film classes to
        characterize the reflection from a stack of dielectric
        films.</p>

        <blockquote>
          <pre>
<font color="#990000">#include "filmtran.h"

using namespace std;    // Use unqualified names for Standard C++ library
using namespace SCATMECH;


int main()
{
    try {

        // Query user for wavelength...
        double lambda = AskUser("Wavelength",0.633);

        // Query user for substrate...
        dielectric_function substrate =
            dielectric_function::AskUser("Substrate",optical_constant(1.5,0));

        // Query user for films...
        dielectric_stack stack = dielectric_stack::AskUser("Stack","");

        // Loop through angles...
        for (double theta=0; theta<90; theta+=1) {

            // Print out s- and p-polarized reflectances...
            cout << theta << tab
                 << norm(stack.rp12(theta*deg,lambda,vacuum,substrate)) << tab
                 << norm(stack.rs12(theta*deg,lambda,vacuum,substrate)) << endl;
        }

    } catch (exception& e) {

        cerr << e.what() << endl;

    }

    return 0;
}
</font>
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

        <h2><a name="Example4" id="Example4">MieProg</a></h2>

        <p>The following program (found in <a href=
        "../code/MieProg/MieProg.cpp">MieProg.cpp</a>) is a
        simple Mie scattering program, demonstrating the use of the
        <a href="miescat.htm">MieScatterer</a> class.</p>

        <blockquote>
          <pre>
<font color="#990000">#include "miescat.h"

using namespace std;        // Use unqualified names for Standard C++ library
using namespace SCATMECH;   // Use unqualified names for the SCATMECH library

int main(int argv,char** argc)
{
    try {

        // Query user for angle and wavelength...
        double dtheta = AskUser("Step angle",1.)*deg;

        // Create a Mie scatterer...
        MieScatterer mie;

        // Query user for parameters...
        mie.AskUser();

        // Output scattering efficiencies...
        cout << "Qsca = " << mie.Qsca()
             << "  Qext = " << mie.Qext()
             << "  Qback = " << mie.Qback() << endl;

        // Output column header...
        cout << endl
             << "Angle" << tab << "S11" << tab << "Pol" << tab << "S33" << tab << "S34" << endl;

        // Get normalization factor at zero angle...
        double m00= MuellerMatrix(mie.s(0.0))[0][0];

        // Loop through angles...
        for (double theta=0.; theta<180.*deg; theta+=dtheta) {

            // Evaluate scattering matrix...
            MuellerMatrix m = mie.s(theta);

            // Output unique elements of normalized Mueller matrix...
            cout << theta/deg << tab
                 << m[0][0]/m00 << tab
                 << m[0][1]/m[0][0] << tab
                 << m[2][2]/m[0][0] << tab
                 << m[2][3]/m[0][0] << endl;
        }

    } catch (exception& e) {

        cerr << e.what() << endl;

    }

    return 0;
}
</font>
</pre>
        </blockquote>

        <p><a href="#top"><span class="totop">Top of Page</span></a></p>

<!-- START FOOTER -->
<hr>
<h2>For More Information</h2>

<p>
<a href="https://www.nist.gov/people/thomas-germer">SCATMECH Technical Information and Questions</a><br>
<a href="http://www.nist.gov/pml/div685/index.cfm" target="_top">Sensor Science Division Home Page</a><br>
<a href="mailto:fraser@nist.gov">Sensor Science Division Inquiries</a><br>
<a href="mailto:thomas.germer@nist.gov">Website Comments</a>

<p>
Current SCATMECH version: <a href="./download.htm">7.22 (April 2021)</a><br>
<br>

</td>
</tr>
</table>

</body>
</html>
